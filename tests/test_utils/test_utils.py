import os
import io
import sys
import csv
from pathlib import Path

cwd = Path(os.path.realpath(__file__)).parent
# sys.path.append(str(cwd.parent.parent))

import cfeproviral.utils as utils
from cfeproviral.fasta import Fasta


def test_get_softclip_start():
    example = cwd.parent / 'data' / 'example2'
    # Normally this alignment would be generated by a separate function
    aln_path = example / 'alignment.sam'
    aln = utils.load_samfile(aln_path)
    cigar = aln[0][5]
    size, op = utils.split_cigar(cigar)[0]
    size = int(size)
    query_fasta = Fasta(example / 'query.fasta')
    query_sequence = None
    for h, s in query_fasta:
        query_sequence = s
    assert query_sequence[:size] == utils.mod_hxb2[:size]
    assert query_sequence[size:] == utils.mod_hxb2[-len(query_sequence) +
                                                   size:]
    softclipped_seq = utils.get_softclipped_region(query_sequence,
                                                   aln,
                                                   aln_path)
    valid_softclipped_seq = utils.load_yaml(example / 'valid' /
                                            'valid_softclipped_seq.yaml')
    assert softclipped_seq == valid_softclipped_seq


# def test_pipeline_with_softclip_retreival():
#     example = cwd.parent / 'data' / 'example2'
#     aln = utils.load_samfile(example / 'alignment.sam')
#     coords = utils.splice_genes(utils.mod_hxb2, utils.mod_hxb2, aln,
#                                 utils.mod_annot)
#     genes = utils.coords_to_genes(coords, utils.mod_hxb2)
#     genes_file = io.StringIO()
#     utils.write_fasta(genes, genes_file)
#     genes_file.seek(0)
#     assert 'X1' not in genes
#     # Get the softclipped region and align it
#     # load query
#     query = None
#     fasta = Fasta(example / 'query.fasta')
#     for header, seq in fasta:
#         query = seq
#     # load target
#     target = None
#     fasta = Fasta(example / 'target.fasta')
#     for header, seq in fasta:
#         target = seq
#     softclipped = utils.get_softclipped_region(query, aln)
#     # Align softclip to hxb2 with special params
#     aln = Alignment(target,
#                     query,
#                     cwd / 'deleteme',
#                     aligner_params={
#                         '-a': '',
#                         '-s': 40,
#                         '-m': 20
#                     })
#     aln = utils.load_samfile(aln.path)
#     # Get the coordinates
#     coords = utils.splice_genes(target, query, aln, utils.mod_annot)
#     assert 'X1' in coords
#     assert coords['X1'] == [0, 33]


def test_merge_coords():
    coords1 = {'A': [10, 20], 'B': [30, 40]}
    coords2 = {'A': [10, 30], 'B': [30, 40]}
    merged1 = utils.merge_coords(coords2, coords1)
    merged2 = utils.merge_coords(coords1, coords2)
    assert merged1 == merged2
    assert merged1 == coords2


def test_getSamplesFromCascade():
    # Write an in-memory cascade file
    cascade = io.StringIO(newline='')
    fieldnames = (
        'sample',
        'demultiplexed',
        'v3loop',
        'g2p',
        'prelim_map',
        'remap',
        'aligned',
    )
    writer = csv.DictWriter(cascade, fieldnames)
    writer.writeheader()
    for i in range(10):
        writer.writerow({
            'sample': i,
            'demultiplexed': i,
            'v3loop': i,
            'g2p': i,
            'prelim_map': i,
            'remap': i,
            'aligned': i
        })
    cascade.seek(0)

    # Test the function
    samples = utils.get_samples_from_cascade(cascade)
    assert len(samples) == 10
    for i in range(10):
        assert samples[str(i)] == i
