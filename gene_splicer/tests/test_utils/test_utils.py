import os
import io
import sys
import pandas as pd
from pathlib import Path

from pandas.core.arrays.period import validate_dtype_freq

cwd = Path(os.path.realpath(__file__)).parent
sys.path.append(str(cwd.parent.parent))

import utils
from file import File
from alignment import Alignment
from fasta import Fasta


def test_get_softclip_start():
    example = cwd.parent / 'data' / 'example2'
    # Normally this alignment would be generated by a separate function
    aln = example / 'alignment.sam'
    aln = utils.load_samfile(aln)
    size, op = aln.iloc[0]['cigar'][0]
    size = int(size)
    query_fasta = Fasta(example / 'query.fasta')
    query_sequence = None
    for h, s in query_fasta:
        query_sequence = s
    assert query_sequence[:size] == utils.mod_hxb2[:size]
    assert query_sequence[size:] == utils.mod_hxb2[-len(query_sequence) +
                                                   size:]
    softclipped_seq = utils.get_softclipped_region(query_sequence, aln)
    valid_softclipped_seq = utils.load_yaml(example / 'valid' /
                                            'valid_softclipped_seq.yaml')
    assert softclipped_seq == valid_softclipped_seq


def test_pipeline_with_softclip_retreival():
    example = cwd.parent / 'data' / 'example2'
    aln = utils.load_samfile(example / 'alignment.sam')
    coords = utils.splice_genes(utils.mod_hxb2, utils.mod_hxb2, aln,
                                utils.mod_annot)
    genes = utils.coords_to_genes(coords, utils.mod_hxb2)
    genes_file = io.StringIO()
    utils.write_fasta(genes, genes_file)
    genes_file.seek(0)
    assert 'X1' not in genes
    # Get the softclipped region and align it
    # load query
    query = None
    fasta = Fasta(example / 'query.fasta')
    for header, seq in fasta:
        query = seq
    # load target
    target = None
    fasta = Fasta(example / 'target.fasta')
    for header, seq in fasta:
        target = seq
    softclipped = utils.get_softclipped_region(query, aln)
    # Align softclip to hxb2 with special params
    aln = Alignment(target, query, cwd / 'deleteme')
    # Get the coordinates
    coords = utils.splice_genes(target, query, aln.path, utils.mod_annot)
    print(coords)
