import os
import io
import sys
import pandas as pd
from pathlib import Path

cwd = Path(os.path.realpath(__file__)).parent
sys.path.append(str(cwd.parent.parent))

import utils
from file import File
from fasta import Fasta


def test_get_softclip_start():
    # Normally this alignment would be generated by a separate function
    softclip_aln = cwd / 'softclip.sam'
    softclip_aln = utils.load_samfile(softclip_aln)
    size, op = softclip_aln.iloc[0]['cigar'][0]
    size = int(size)
    query_fasta = Fasta(cwd / 'query.fasta')
    query_sequence = None
    for h, s in query_fasta:
        query_sequence = s
    assert query_sequence[:size] == utils.mod_hxb2[:size]
    assert query_sequence[size:] == utils.mod_hxb2[-len(query_sequence) +
                                                   size:]
    softclip_start_genes = utils.get_softclipped_region(
        query_sequence, softclip_aln, utils.mod_annot)
    # assert softclip_start == query_sequence[:size]
    softclip_seqs = utils.coords_to_genes(softclip_start_genes, query_sequence)
    assert softclip_seqs == {'X1': query_sequence[:size]}


def test_pipeline_with_softclip_retreival():
    softclip_aln = utils.load_samfile(cwd / 'softclip.sam')
    coords = utils.splice_genes(utils.mod_hxb2, utils.mod_hxb2, softclip_aln,
                                utils.mod_annot)
    genes = utils.coords_to_genes(coords, utils.mod_hxb2)
    genes_file = io.StringIO()
    utils.write_fasta(genes, genes_file)
    genes_file.seek(0)
    valid_genes = utils.load_yaml(cwd / 'valid_genes.yaml')
    for gene, seq in genes.items():
        assert seq == valid_genes[gene]